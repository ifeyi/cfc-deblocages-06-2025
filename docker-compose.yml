# docker-compose.yml
version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cfc_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-cfc_deblocages}
      POSTGRES_USER: ${DB_USER:-cfc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cfc_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cfc_network

  # Redis pour cache et Celery
  redis:
    image: redis:7-alpine
    container_name: cfc_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-RedisPassword123!}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cfc_network

  # MinIO pour le stockage des documents
  minio:
    image: minio/minio:latest
    container_name: cfc_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-MinioPassword123!}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cfc_network

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cfc_backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cfc_user}:${DB_PASSWORD:-SecurePassword123!}@postgres:5432/${DB_NAME:-cfc_deblocages}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RedisPassword123!}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-MinioPassword123!}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-fr}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - cfc_network

  # Celery Worker pour les tâches asynchrones
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cfc_celery_worker
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cfc_user}:${DB_PASSWORD:-SecurePassword123!}@postgres:5432/${DB_NAME:-cfc_deblocages}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RedisPassword123!}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-MinioPassword123!}
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
      - postgres
    command: celery -A app.core.celery_app worker -l info
    networks:
      - cfc_network

  # Celery Beat pour les tâches planifiées
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cfc_celery_beat
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-cfc_user}:${DB_PASSWORD:-SecurePassword123!}@postgres:5432/${DB_NAME:-cfc_deblocages}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-RedisPassword123!}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
      - postgres
    command: celery -A app.core.celery_app beat -l info
    networks:
      - cfc_network

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: cfc_frontend
    environment:
      - VITE_API_URL=http://localhost:${NGINX_PORT:-80}/api
      - VITE_DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-fr}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    command: npm run dev -- --host 0.0.0.0 --port 3000
    networks:
      - cfc_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cfc_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - cfc_network

  # Flower pour monitoring Celery (optionnel)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: cfc_flower
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-RedisPassword123!}@redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
      - celery_worker
    command: celery -A app.core.celery_app flower
    networks:
      - cfc_network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  backend_uploads:
  nginx_logs:

networks:
  cfc_network:
    driver: bridge